import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import rps.robotarium as robotarium
from rps.utilities.graph import *
from rps.utilities.transformations import *
from rps.utilities.barrier_certificates import *
from rps.utilities.misc import *
from rps.utilities.controllers import *
from scipy.spatial import Voronoi, voronoi_plot_2d

def run_robotarium_with_battery_operations():
    np.random.seed = 1024

    # Define colors for robots, charging points, and battery levels
    charger_colors = ['#00FF00', '#00B300', '#008000', '#00FF00', '#00FF80']
    battery_colors = ['#00FF00', '#00B300', '#008000', '#00FF00', '#00FF80']

    recharger1_point = patches.Circle((-1.5, -1), radius=0.03, color=charger_colors[0])  # Blue color for charging points
    recharger2_point = patches.Circle((1.5, -1), radius=0.03, color=charger_colors[1])
    recharger3_point = patches.Circle((-1.5, 1), radius=0.03, color=charger_colors[2])
    recharger4_point = patches.Circle((1.5, 1), radius=0.03, color=charger_colors[3])
    recharger5_point = patches.Circle((0, 0.5), radius=0.03, color=charger_colors[4])

    # Define points of interest
    entropy_points = []
    recharger_points = [recharger1_point, recharger2_point, recharger3_point, recharger4_point, recharger5_point]

    # Instantiate Robotarium object with initial poses
    N = 5

    # Set initial poses of robots to charging points
    initial_poses = np.vstack((np.array([recharger.center[0] for recharger in recharger_points]),
                            np.array([recharger.center[1] for recharger in recharger_points]),
                            np.zeros(N)))

    r = robotarium.Robotarium(number_of_robots=N, show_figure=True, sim_in_real_time=True, initial_conditions=initial_poses)

    r.chassis_patches[0].set_facecolor("#00FF00")
    r.chassis_patches[1].set_facecolor("#00B300")
    r.chassis_patches[2].set_facecolor("#008000")
    r.chassis_patches[3].set_facecolor("#00FF00")
    r.chassis_patches[4].set_facecolor("#00FF80")

    # Calculate approximated centroids for entropy points
    for entropy_index in range(5):
        nearest_chargers = []
        for recharger in recharger_points:
            distance = np.linalg.norm(
                np.array([entropy_index % 3 - recharger.center[0], (entropy_index // 3) - recharger.center[1]]))
            nearest_chargers.append((distance, recharger))
        nearest_chargers.sort(key=lambda x: x[0])
        centroid = np.mean([charger.center for _, charger in nearest_chargers[:3]], axis=0)
        entropy_points.append(patches.Circle(centroid, radius=0.03, color="#FFFF00"))

    # Voronoi tessellation
    all_points = np.array([[recharger.center[0], recharger.center[1]] for recharger in recharger_points] +
                        [[entropy_point.center[0], entropy_point.center[1]] for entropy_point in entropy_points])

    vor = Voronoi(all_points)

    # Plot Voronoi boundaries
    voronoi_plot_2d(vor, ax=plt.gca(), show_vertices=False, line_colors='orange', line_width=2, line_alpha=0.6)

    # How many iterations do we want (about N*0.033 seconds)
    iterations = 500

    # We're working in single-integrator dynamics, and we don't want the robots
    # to collide or drive off the testbed. Thus, we're going to use barrier certificates
    si_barrier_cert = create_single_integrator_barrier_certificate_with_boundary()

    # Create SI to UNI dynamics transformation
    si_to_uni_dyn, uni_to_si_states = create_si_to_uni_mapping()

    # Set up simulation parameters
    x_min = -1.5
    x_max = 1.5
    y_min = -1
    y_max = 1
    res = 0.05

    # Battery threshold
    battery_threshold = 0.4  # Below 40%

    # Initialize battery levels to 100%
    battery_levels = np.full(N, 1.0)

    # Draw entropy points and charging points
    for point in entropy_points + recharger_points:
        plt.gca().add_patch(point)

    # Create a plot for battery levels
    plt.figure()
    plt.xlabel('Robot')
    plt.ylabel('Battery Level')
    plt.title('Battery Levels')

    # Add a horizontal line for the battery threshold
    plt.axhline(y=battery_threshold, color='r', linestyle='--', label='Battery Threshold')

    bar_plot = plt.bar(range(N), battery_levels, color=battery_colors)

    # Battery discharge parameters
    idle_battery_loss = 0.001  # 0.001% discharge when idle
    moving_battery_loss = 0.005  # 0.5% discharge when moving

    # Assign charging points to robots
    robot_charging_points = [recharger1_point, recharger2_point, recharger3_point, recharger4_point, recharger5_point]

    # Main control loop
    for k in range(iterations):
        # Get the poses of the robots and convert to single-integrator poses
        x = r.get_poses()
        x_si = uni_to_si_states(x)
        current_x = x_si[0, :, None]
        current_y = x_si[1, :, None]

        c_v = np.zeros((N, 2))
        w_v = np.zeros(N)

        # Check energy level and direct to charging station if below threshold
        for robot in range(N):
            if battery_levels[robot] < battery_threshold:
                # Robot needs to recharge
                # Get its designated charging point based on its index
                target_x, target_y = robot_charging_points[robot].center
                # Update potential field
                c_v[robot] = np.array([target_x, target_y])
                w_v[robot] = 1
            else:
                # Compute potential field towards entropy points with information gain
                for entropy_point in entropy_points:
                    distance = np.linalg.norm(
                        np.array([current_x[robot] - entropy_point.center[0], current_y[robot] - entropy_point.center[1]]))
                    importance_value = 1 / distance

                    # Estimate information gain (example calculation)
                    info_gain = importance_value * np.random.rand()  # Example estimation, you should replace this with a proper calculation

                    c_v[robot][0] += entropy_point.center[0] * importance_value * info_gain
                    c_v[robot][1] += entropy_point.center[1] * importance_value * info_gain
                    w_v[robot] += importance_value * info_gain

        # Initialize the single-integrator control inputs
        si_velocities = np.zeros((2, N))

        # Calculate velocities based on potential field
        for robot in range(N):
            c_x = c_v[robot][0] / w_v[robot]
            c_y = c_v[robot][1] / w_v[robot]
            si_velocities[:, robot] = 1 * [(c_x - current_x[robot][0]), (c_y - current_y[robot][0])]

        # Use barrier certificate to avoid collisions
        si_velocities = si_barrier_cert(si_velocities, x_si)

        # Transform single integrator to unicycle
        dxu = si_to_uni_dyn(si_velocities, x)

        # Set the velocities of agents 1,...,N
        r.set_velocities(np.arange(N), dxu)

        # Update battery levels and integrate battery level management and robot movement towards task points and charging stations
        for robot in range(N):
            # Increase battery level when the robot is at its designated charging point and charging
            charging = False
            if battery_levels[robot] < 1.0:  # Check if battery is not fully charged
                if np.linalg.norm(
                        np.array([current_x[robot] - robot_charging_points[robot].center[0], current_y[robot] - robot_charging_points[robot].center[1]])) < 0.1:
                    charging = True
                    battery_levels[robot] = min(battery_levels[robot] + 0.1, 1)  # Charge with a rate of 0.1 per iteration

            # Only decrease battery level when the robot is not charging
            if not charging:
                # Determine battery discharge based on robot activity
                battery_loss = idle_battery_loss if np.all(si_velocities[:, robot] == 0) else moving_battery_loss
                battery_levels[robot] -= battery_loss

            # Clip battery level to ensure it stays within [0, 1]
            battery_levels[robot] = np.clip(battery_levels[robot], 0, 1)

            # Update bar plot color based on battery level
            bar_plot[robot].set_height(battery_levels[robot])
            bar_plot[robot].set_color(
                battery_colors[robot] if battery_levels[robot] >= battery_threshold else 'red')

        # Pause to show animation
        plt.pause(0.1)

        # Iterate the simulation
        r.step()

    # Call at end of script to print debug information and for your script to run on the Robotarium server properly
    r.call_at_scripts_end()

# Run the function
run_robotarium_with_battery_operations()
